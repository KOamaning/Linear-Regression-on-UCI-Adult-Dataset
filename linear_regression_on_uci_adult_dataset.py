# -*- coding: utf-8 -*-
"""Linear Regression on UCI Adult Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-fGp2ShnTd8KnNGJP1nHzVULKzLg0Ung
"""

import pandas as pd
import numpy as np
import statsmodels.api as sm
from sklearn.metrics import mean_absolute_error

# split data
df = pd.read_csv("/content/Adult.unknown")

#25 split data 50-50
np.random.seed(42)
indices = np.random.permutation(len(df))
split_point = len(indices) // 2
train_indices = indices[:split_point]
test_indices = indices[split_point:]

train_df = df.iloc[train_indices]
test_df = df.iloc[test_indices]

print("Original dataset:", len(df), "rows")
print("Training set:", len(train_df), "rows")
print("Test set:", len(test_df), "rows")

#26 variables for the regression model
X_train = train_df[['age', 'education-num']]
y_train = train_df['hours-per-week']

#constant term for the intercept
X_train_with_const = sm.add_constant(X_train)

#regression training model
model = sm.OLS(y_train, X_train_with_const).fit()
print(model.summary())

#27 model parameters
intercept = model.params['const']
age_coef = model.params['age']
edu_coef = model.params['education-num']

# 28. Simple regression equation
print("\n28. Regression Equation:")
equation = f"Hours per Week = {intercept:.4f} + {age_coef:.4f}*Age + {edu_coef:.4f}*Education_Num"
print(equation)

# 29 coefficient interpretations for Age
print("\n29. Age Coefficient:")
print(f"For each additional year of age, hours per week increases by {age_coef:.4f}")

#30 coefficient interpretations for education
print("\n30. Education Coefficient:")
print(f"For each additional unit of education, hours per week increases by {edu_coef:.4f}")

# 31.interpret the value of s
s = np.sqrt(model.scale)
print("\n31. interpret the value of s:")
print(f"s = {s:.4f}")
print(f"Typical difference between actual and predicted hours: {s:.4f} hours")

# 32. adjusted R-squared
adj_r2 = model.rsquared_adj
print("\n32. adjusted R-squared:")
print(f"RÂ²adj = {adj_r2:.4f}")
print(f"Age and education explain {adj_r2*100:.2f}% of hours per week variation")

# 33. validate model with MAE
X_test = test_df[['age', 'education-num']]
y_test = test_df['hours-per-week']
X_test_with_const = sm.add_constant(X_test)

# predictions
predictions = model.predict(X_test_with_const)

# calculate MAE for model
mae_model = sum(abs(y_test - predictions)) / len(y_test)

# calculate baseline (average hours)
baseline = sum(y_train) / len(y_train)
mae_baseline = sum(abs(y_test - baseline)) / len(y_test)

print("\n33. model Performance:")
print(f"MAE Baseline = {mae_baseline:.4f}")
print(f"MAE Model = {mae_model:.4f}")

if mae_model < mae_baseline:
    print("The regression model is better than the baseline")
else:
    print("The regression model is not better than the baseline")

import pandas as pd
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

# 25. Load dataset and partition into training and test sets
df = pd.read_csv("/content/Adult.unknown")

df = df[['age', 'education-num', 'hours-per-week']].dropna()
train_df, test_df = train_test_split(df, test_size=0.5, random_state=42)

# 26. Run regression model
X_train = train_df[['age', 'education-num']]
y_train = train_df['hours-per-week']
X_train = sm.add_constant(X_train)
model = sm.OLS(y_train, X_train).fit()

# Model summary
print("\n26. Regression Model Summary:\n", model.summary())

# 27. Validate the model
X_test = test_df[['age', 'education-num']]
y_test = test_df['hours-per-week']
X_test = sm.add_constant(X_test)
y_pred = model.predict(X_test)

# 28. Regression Equation
print("\n28. Regression Equation: Estimated Hours per Week = {:.2f} + ({:.4f} * Age) + ({:.4f} * Education Num)".format(
    model.params['const'], model.params['age'], model.params['education-num']))

# 29. Interpret Age Coefficient
print("\n29. Interpretation of Age Coefficient: On average, an additional year of age increases work hours by {:.4f}.".format(model.params['age']))

# 30. Interpret Education Num Coefficient
print("\n30. Interpretation of Education Num Coefficient: On average, each additional year of education increases work hours by {:.4f}.".format(model.params['education-num']))

# 31. Standard Error of Regression (s)
print("\n31. Standard Error of Regression (s): {:.4f}".format(model.bse.mean()))

# 32. Adjusted R-squared
print("\n32. Adjusted R^2: {:.4f}".format(model.rsquared_adj))

# 33. MAE Comparison
mae_regression = mean_absolute_error(y_test, y_pred)
mae_baseline = mean_absolute_error(y_test, [y_train.mean()] * len(y_test))
print("\n33. MAE (Baseline): {:.4f}".format(mae_baseline))
print("MAE (Regression): {:.4f}".format(mae_regression))
print("Did the model outperform the baseline?", "Yes" if mae_regression < mae_baseline else "No")